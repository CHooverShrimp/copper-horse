---
export const prerender = false;

import Layout from "@layouts/Layout.astro";

// Get the slug from the URL
const { slug } = Astro.params;

// Fetch the data on each request (SSR)
const response = await fetch(
	"https://opensheet.elk.sh/1HQtbx_W_TRkViZCQcqflwximoPfXE-XQF9-YMWMAd14/Sheet1",
);
// Define the expected type for a box
type Box = {
	Active: string;
	Item: string;
	Thumbnail?: string;
	Desc?: string;
	Price?: string;
	Images?: string;
	// Add other fields as needed
};

const boxes = (await response.json()) as Box[];

// Find the box that matches the slug
const box = boxes.find(
	(box) =>
		box.Active === "TRUE" &&
		box.Item.toLowerCase()
			.replace(/\s+/g, "")
			.replace(/[^a-z0-9]/gi, "") === slug,
);

// If no box found, return 404
if (!box) {
	return Astro.redirect("/404");
}

let images = box.Images?.split(',').map(url => url.trim()).filter(url => url) || [];
// If no images in the Images field, use thumbnail as fallback
images = images.length > 0 ? images : (box.Thumbnail ? [box.Thumbnail] : []);

// Helper function to get previous slide index
const getPrevSlide = (currentIndex: number, totalSlides: number) => {
	return currentIndex === 0 ? totalSlides - 1 : currentIndex - 1;
};

// Helper function to get next slide index
const getNextSlide = (currentIndex: number, totalSlides: number) => {
	return currentIndex === totalSlides - 1 ? 0 : currentIndex + 1;
};
---

<Layout>
	<div class="item-detail-container min-h-screen p-[2rem]">
		<div class="item-detail">
			<section class={`carousel ${images.length <= 1 ? 'single-image' : ''}`} aria-label="Gallery">
				<!-- Placeholder to get the right height-->
				<img
					src={images[0]}
					class="carousel__image"
				/>
				{images.length > 1 && (
				<ol class="carousel__viewport">
					{images.map((image, index) => (
						<li
							id={`carousel__slide${index + 1}`}
							tabindex="0"
							class="carousel__slide"
						>
							<div class="carousel__snapper">
								<img
									src={image}
									alt={`${box.Item} - Image ${index + 1}`}
									class="carousel__image"
								/>
								{images.length > 1 && (
								<a
									href={`#carousel__slide${getPrevSlide(index, images.length) + 1}`}
									class="carousel__prev"
								>
									Go to {index === 0 ? 'last' : 'previous'} slide
								</a>
								<a
									href={`#carousel__slide${getNextSlide(index, images.length) + 1}`}
									class="carousel__next"
								>
									Go to {index === images.length - 1 ? 'first' : 'next'} slide
								</a>
								)}
							</div>
						</li>
					))}
				</ol>

				<aside class="carousel__navigation">
					<ol class="carousel__navigation-list">
						{images.map((_, index) => (
							<li class="carousel__navigation-item">
								<a
									href={`#carousel__slide${index + 1}`}
									class="carousel__navigation-button"
								>
									Go to slide {index + 1}
								</a>
							</li>
						))}
					</ol>
				</aside>
				)}
			</section>

			<div class="detail-content justify-between">
				<div class="detail-main">
					<h1 class="item-title">{box.Item}</h1>

					{
						box.Desc && (
							<div class="description-section">
								<p class="description">{box.Desc}</p>
							</div>
						)
					}
				</div>

				<div>
					{
						box.Price && (
							<div class="price-section">
								<div class="price">{box.Price}</div>
							</div>
						)
					}

					<div class="actions">
						<a href="/" class="back-button">‚Üê Back to Catalog</a>
						{
							box.Price && (
								<a href="/contact" class="contact-button">
									Contact for Purchase
								</a>
							)
						}
					</div>
				</div>
			</div>
		</div>
	</div>
</Layout>

<style>
	.item-detail {
		max-width: 1000px;
		margin: 0 auto;
		background: white;
		border-radius: 16px;
		box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 0;
	}

	.image-container {
		background: #f3f4f6;
		display: flex;
		align-items: center;
		justify-content: center;
		min-height: 400px;
	}

	.detail-image {
		width: 100%;
		height: 100%;
		object-fit: cover;
	}

	.detail-content {
		padding: 3rem;
		display: flex;
		flex-direction: column;
	}

	.item-title {
		font-size: 2.5rem;
		font-weight: 700;
		color: #1f2937;
		margin: 0 0 2rem 0;
		line-height: 1.2;
	}

	.description-section {
		margin-bottom: 2rem;
	}

	.description-section h2 {
		font-size: 1.25rem;
		font-weight: 600;
		color: #374151;
		margin: 0 0 1rem 0;
	}

	.description {
		color: #6b7280;
		font-size: 1rem;
		line-height: 1.6;
		margin: 0;
	}

	.price-section {
		margin-bottom: 2rem;
	}

	.price {
		font-size: 1.5rem;
		font-weight: 700;
		color: #059669;
		background: #ecfdf5;
		padding: 1rem 1.5rem;
		border-radius: 8px;
		display: inline-block;
	}

	.actions {
		display: flex;
		gap: 1rem;
		align-items: center;
		flex-wrap: wrap;
	}

	.back-button {
		color: #6b7280;
		text-decoration: none;
		font-weight: 500;
		transition: color 0.2s ease;
	}

	.back-button:hover {
		color: #374151;
	}

	.contact-button {
		background: #3b82f6;
		color: white;
		border: none;
		padding: 0.75rem 1.5rem;
		border-radius: 8px;
		font-weight: 600;
		cursor: pointer;
		transition: background 0.2s ease;
	}

	.contact-button:hover {
		background: #2563eb;
	}

	/* Mobile responsive */
	@media (max-width: 768px) {
		.item-detail {
			grid-template-columns: 1fr;
			margin: 1rem;
		}

		.detail-content {
			padding: 2rem;
		}

		.item-title {
			font-size: 2rem;
		}

		.actions {
			flex-direction: column;
			align-items: stretch;
		}

		.contact-button {
			width: 100%;
			text-align: center;
		}
	}
</style>

<style>


	@keyframes snap {
		96% {
			scroll-snap-align: center;
		}
		97% {
			scroll-snap-align: none;
		}
		99% {
			scroll-snap-align: none;
		}
		100% {
			scroll-snap-align: center;
		}
	}


	ol, li {
	list-style: none;
	margin: 0;
	padding: 0;
	}

	.carousel {
	position: relative;

	filter: drop-shadow(0 0 10px #0003);
	perspective: 100px;
	}

	.carousel__viewport {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	display: flex;
	overflow-x: scroll;
	counter-reset: item;
	scroll-behavior: smooth;
	scroll-snap-type: x mandatory;
	}

	.carousel__slide {
	position: relative;
	flex: 0 0 100%;
	width: 100%;
	counter-increment: item;
	}

	.carousel__slide:nth-child(even) {
	}

	.carousel__snapper {
	position: absolute;
	top: 0;
	left: 0;
	width: 100%;
	height: 100%;
	scroll-snap-align: center;
	}

	@media (hover: hover) {
	.carousel__snapper {
		animation-name: tonext, snap;
		animation-timing-function: ease;
		animation-duration: 4s;
		animation-iteration-count: infinite;
	}

	.carousel__slide:last-child .carousel__snapper {
		animation-name: tostart, snap;
	}
	}

	@media (prefers-reduced-motion: reduce) {
	.carousel__snapper {
		animation-name: none;
	}
	}

	.carousel:hover .carousel__snapper,
	.carousel:focus-within .carousel__snapper {
	animation-name: none;
	}

	.carousel__navigation {
	position: absolute;
	right: 0;
	bottom: 0;
	left: 0;
	text-align: center;
	}

	.carousel__navigation-list,
	.carousel__navigation-item {
	display: inline-block;
	}

	.carousel__navigation-button {
	display: inline-block;
	width: 1.5rem;
	height: 1.5rem;
	background-color: #333;
	background-clip: content-box;
	border: 0.25rem solid transparent;
	border-radius: 50%;
	font-size: 0;
	transition: transform 0.1s;
	}

	.carousel::before,
	.carousel::after,
	.carousel__prev,
	.carousel__next {
	position: absolute;
	top: 0;
	margin-top: 37.5%;
	width: 4rem;
	height: 4rem;
	transform: translateY(-50%);
	border-radius: 50%;
	font-size: 0;
	outline: 0;
	}

	.carousel::before,
	.carousel__prev {
	left: -1rem;
	}

	.carousel::after,
	.carousel__next {
	right: -1rem;
	}

	.carousel::before,
	.carousel::after {
	content: '';
	z-index: 1;
	background-color: #333;
	background-size: 1.5rem 1.5rem;
	background-repeat: no-repeat;
	background-position: center center;
	color: #fff;
	font-size: 2.5rem;
	line-height: 4rem;
	text-align: center;
	pointer-events: none;
	}

	.carousel::before {
	background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpolygon points='0,50 80,100 80,0' fill='%23fff'/%3E%3C/svg%3E");
	}

	.carousel::after {
	background-image: url("data:image/svg+xml,%3Csvg viewBox='0 0 100 100' xmlns='http://www.w3.org/2000/svg'%3E%3Cpolygon points='100,50 20,100 20,0' fill='%23fff'/%3E%3C/svg%3E");
	}

	/* Hide navigation arrows when there's only one image */
	.carousel.single-image::before,
	.carousel.single-image::after {
		display: none;
	}
</style>

<script>
	// Prevent default scroll behavior for carousel links
	document.addEventListener('DOMContentLoaded', function() {
		const carouselLinks = document.querySelectorAll('.carousel a[href^="#carousel__slide"]');

		carouselLinks.forEach(link => {
			link.addEventListener('click', function(e) {
				e.preventDefault();

				const targetId = (e.currentTarget as HTMLAnchorElement).getAttribute('href');

				if (!targetId) return; // Add null check

				const targetElement = document.querySelector(targetId) as HTMLElement;

				if (targetElement) {
					// Scroll the carousel viewport to the target slide
					const viewport = document.querySelector('.carousel__viewport') as HTMLElement;
					const slideIndex = parseInt(targetId.replace('#carousel__slide', '')) - 1;
					const slideWidth = viewport.scrollWidth / document.querySelectorAll('.carousel__slide').length;

					viewport.scrollTo({
						left: slideIndex * slideWidth,
						behavior: 'smooth'
					});
				}
			});
		});
	});
</script>